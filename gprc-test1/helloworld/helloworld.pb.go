// Code generated by protoc-gen-go. DO NOT EDIT.
// source: helloworld.proto

/*
Package helloworld is a generated protocol buffer package.

It is generated from these files:
	helloworld.proto

It has these top-level messages:
	HelloRequest
	HelloReply
*/
package helloworld

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HelloRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *HelloRequest) Reset()                    { *m = HelloRequest{} }
func (m *HelloRequest) String() string            { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()               {}
func (*HelloRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HelloRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type HelloReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *HelloReply) Reset()                    { *m = HelloReply{} }
func (m *HelloReply) String() string            { return proto.CompactTextString(m) }
func (*HelloReply) ProtoMessage()               {}
func (*HelloReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HelloReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*HelloRequest)(nil), "helloworld.HelloRequest")
	proto.RegisterType((*HelloReply)(nil), "helloworld.HelloReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Greeter service

type GreeterClient interface {
	SayHelloClientToServer(ctx context.Context, opts ...grpc.CallOption) (Greeter_SayHelloClientToServerClient, error)
	SayHelloServerToClient(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter_SayHelloServerToClientClient, error)
	SayHelloServerToServer(ctx context.Context, opts ...grpc.CallOption) (Greeter_SayHelloServerToServerClient, error)
}

type greeterClient struct {
	cc *grpc.ClientConn
}

func NewGreeterClient(cc *grpc.ClientConn) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayHelloClientToServer(ctx context.Context, opts ...grpc.CallOption) (Greeter_SayHelloClientToServerClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Greeter_serviceDesc.Streams[0], c.cc, "/helloworld.Greeter/SayHelloClientToServer", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterSayHelloClientToServerClient{stream}
	return x, nil
}

type Greeter_SayHelloClientToServerClient interface {
	Send(*HelloRequest) error
	CloseAndRecv() (*HelloReply, error)
	grpc.ClientStream
}

type greeterSayHelloClientToServerClient struct {
	grpc.ClientStream
}

func (x *greeterSayHelloClientToServerClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterSayHelloClientToServerClient) CloseAndRecv() (*HelloReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) SayHelloServerToClient(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter_SayHelloServerToClientClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Greeter_serviceDesc.Streams[1], c.cc, "/helloworld.Greeter/SayHelloServerToClient", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterSayHelloServerToClientClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Greeter_SayHelloServerToClientClient interface {
	Recv() (*HelloReply, error)
	grpc.ClientStream
}

type greeterSayHelloServerToClientClient struct {
	grpc.ClientStream
}

func (x *greeterSayHelloServerToClientClient) Recv() (*HelloReply, error) {
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) SayHelloServerToServer(ctx context.Context, opts ...grpc.CallOption) (Greeter_SayHelloServerToServerClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Greeter_serviceDesc.Streams[2], c.cc, "/helloworld.Greeter/SayHelloServerToServer", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterSayHelloServerToServerClient{stream}
	return x, nil
}

type Greeter_SayHelloServerToServerClient interface {
	Send(*HelloRequest) error
	Recv() (*HelloReply, error)
	grpc.ClientStream
}

type greeterSayHelloServerToServerClient struct {
	grpc.ClientStream
}

func (x *greeterSayHelloServerToServerClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterSayHelloServerToServerClient) Recv() (*HelloReply, error) {
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Greeter service

type GreeterServer interface {
	SayHelloClientToServer(Greeter_SayHelloClientToServerServer) error
	SayHelloServerToClient(*HelloRequest, Greeter_SayHelloServerToClientServer) error
	SayHelloServerToServer(Greeter_SayHelloServerToServerServer) error
}

func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_SayHelloClientToServer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServer).SayHelloClientToServer(&greeterSayHelloClientToServerServer{stream})
}

type Greeter_SayHelloClientToServerServer interface {
	SendAndClose(*HelloReply) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type greeterSayHelloClientToServerServer struct {
	grpc.ServerStream
}

func (x *greeterSayHelloClientToServerServer) SendAndClose(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterSayHelloClientToServerServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Greeter_SayHelloServerToClient_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterServer).SayHelloServerToClient(m, &greeterSayHelloServerToClientServer{stream})
}

type Greeter_SayHelloServerToClientServer interface {
	Send(*HelloReply) error
	grpc.ServerStream
}

type greeterSayHelloServerToClientServer struct {
	grpc.ServerStream
}

func (x *greeterSayHelloServerToClientServer) Send(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Greeter_SayHelloServerToServer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServer).SayHelloServerToServer(&greeterSayHelloServerToServerServer{stream})
}

type Greeter_SayHelloServerToServerServer interface {
	Send(*HelloReply) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type greeterSayHelloServerToServerServer struct {
	grpc.ServerStream
}

func (x *greeterSayHelloServerToServerServer) Send(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterSayHelloServerToServerServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHelloClientToServer",
			Handler:       _Greeter_SayHelloClientToServer_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SayHelloServerToClient",
			Handler:       _Greeter_SayHelloServerToClient_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SayHelloServerToServer",
			Handler:       _Greeter_SayHelloServerToServer_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "helloworld.proto",
}

func init() { proto.RegisterFile("helloworld.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 179 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xc8, 0x48, 0xcd, 0xc9,
	0xc9, 0x2f, 0xcf, 0x2f, 0xca, 0x49, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x42, 0x88,
	0x28, 0x29, 0x71, 0xf1, 0x78, 0x80, 0x78, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x42,
	0x5c, 0x2c, 0x79, 0x89, 0xb9, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x60, 0xb6, 0x92,
	0x1a, 0x17, 0x17, 0x54, 0x4d, 0x41, 0x4e, 0xa5, 0x90, 0x04, 0x17, 0x7b, 0x6e, 0x6a, 0x71, 0x71,
	0x62, 0x3a, 0x4c, 0x11, 0x8c, 0x6b, 0xf4, 0x9b, 0x91, 0x8b, 0xdd, 0xbd, 0x28, 0x35, 0xb5, 0x24,
	0xb5, 0x48, 0xc8, 0x8f, 0x4b, 0x2c, 0x38, 0xb1, 0x12, 0xac, 0xcd, 0x39, 0x27, 0x33, 0x35, 0xaf,
	0x24, 0x24, 0x3f, 0x38, 0xb5, 0xa8, 0x2c, 0xb5, 0x48, 0x48, 0x42, 0x0f, 0xc9, 0x41, 0xc8, 0x76,
	0x4b, 0x89, 0x61, 0x91, 0x29, 0xc8, 0xa9, 0x54, 0x62, 0xd0, 0x60, 0x44, 0x36, 0x0f, 0x62, 0x4e,
	0x08, 0xd4, 0x5c, 0x72, 0xcc, 0x33, 0x60, 0x14, 0x0a, 0xc0, 0x34, 0x8f, 0x12, 0xf7, 0x19, 0x30,
	0x26, 0xb1, 0x81, 0x03, 0xd7, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x8a, 0x77, 0xea, 0x8d, 0x70,
	0x01, 0x00, 0x00,
}
